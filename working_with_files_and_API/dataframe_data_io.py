from pprint import pprint
import json
import pandas as pd

"""
-- Перемещение данных в DataFrame и из него --

В pandas входит ряд методов чтения, каждый из которых предназначен для загрузки данных в определенном формате
и/или из определенного типа источника.
Эти методы позволяют преобразовать табличные данные в DataFrame одним вызовом, благодаря чему импортированный датасет
сразу готов к анализу.
В pandas также есть методы для преобразования данных DataFrame в другие форматы,
например JSON. В этом разделе рассматриваются методы, позволяющие перемещать данные в DataFrame или из него.
Мы также рассмотрим библиотеку pandas-datareader, которая полезна для загрузки данных из различных онлайн источников
и преобразования в pandas DataFrame.

-- Импортирование вложенных структур JSON --
Поскольку JSON стал фактическим стандартом для обмена данными между приложениями,
важно иметь возможность быстро импортировать JSON-документ
и преобразовывать его в структуру данных Python. В предыдущей главе мы
рассмотрели пример преобразования простой, невложенной структуры JSON
в объект DataFrame с помощью функции pandas - read_json(). 

Как видите, каждая запись в документе JSON начинается с простой структурной 
пары «ключ — значение» с ключом Emp, за которой следует вложенная структура 
с ключом POs. Иерархическую структуру JSON можно преобразовать в pandas 
DataFrame с помощью метода чтения библиотеки pandas json_normalize(), который принимает вложенную структуру и делает 
ее плоской, или нормализует, превращая в простую таблицу. 

Помимо экземпляра JSON, который будет обработан json_normalize(), мы 
указываем POs как вложенный массив, который необходимо сделать плоским, 
и Emp в качестве поля, которое будет использоваться как часть сложного индекса 
в итоговой таблице. В той же строке кода мы задаем два столбца в качестве 
индекса: Emp и Pono."""

data = [
		{"Emp": "Jeff Russell",
			"POs": [
					{"Pono": 2608, "Total": 35},
					{"Pono": 2617, "Total": 35},
					{"Pono": 2620, "Total": 139}
					]
		},
		{"Emp": "Jane Boorman",
			"POs": [
					{"Pono": 2621, "Total": 95},
					{"Pono": 2626, "Total": 218}
					]
		}
		]

df = pd.json_normalize(data, "POs", "Emp").set_index(["Emp", "Pono"])
print(df)

print("\n--------------------------------------------------------------\n")


"""
-- Конвертирование DataFrame в JSON -- 
На практике часто приходится выполнять обратную операцию — преобразование 
pandas DataFrame в JSON. Преобразуем датафрейм df обратно в экземпляр JSON, 
из которого он был первоначально сгенерирован.

Начинаем с удаления двухколоночного индекса датафрейма, чтобы Emp и Pono стали обычными столбцами. 
Затем используем составной однострочник для преобразования DataFrame в документ JSON. 
Сначала применим к датафрейму операцию groupby, группируя строки по столбцу Emp. 
Используем groupby() в сочетании с apply() для применения лямбда-функции к каждой записи в каждой группе. 
Внутри лямбда-функции укажем список полей для отображения в строке вложенного массива для каждой записи Emp. 
Применим метод DataFrame.to_dict() с параметром records, чтобы отформатировать поля в массиве следующим образом: 
[{колонка:значение}, ... , {колонка:значение}], где каждый словарь — заказ, связанный с конкретным сотрудником.
На данном этапе у нас есть объект Series с индексом Emp и столбцом, содержащим массив заказов, связанных с сотрудником. 
Чтобы дать колонке название (в данном случае POs), необходимо преобразовать объект Series в DataFrame. 
Простой способ сделать это — метод reset_index(). 
Помимо преобразования Series в DataFrame, reset_index() изменяет Emp, так что это больше не индекс, 
а обычный столбец, что будет важно при преобразовании датафрейма в формат JSON. 
Наконец, мы явно задаем имя столбца, содержащего вложенный массив (POs), используя метод rename(), 
и конвертируем измененный DataFrame в JSON ❻"""

df = df.reset_index()
json_doc = (df.groupby(['Emp'], as_index=True)
			.apply(lambda x: x[['Pono', 'Total']]
			.to_dict('records'))
			.reset_index().rename(columns={0: 'POs'})
			.to_json(orient='records'))


json_to_dict = json.loads(json_doc)

pprint(json_to_dict, sort_dicts=False, width=50)









