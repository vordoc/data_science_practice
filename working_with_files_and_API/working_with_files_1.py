from pprint import pprint
import csv

"""ТЕКСТОВЫЕ ФАЙЛЫ

Текстовые файлы (.txt) — это, пожалуй, самый распространенный тип файлов.
Для Python текстовый файл — это последовательность строковых объектов.

Каждый строковый объект представляет собой одну строку текстового файла,
то есть последовательность символов, заканчивающуюся скрытым символом
новой строки (\n) или жестким переносом (намеренным разрывом строки)."""

path = 'E:/Data science/DS_training/excerpt.txt'

with open(path, 'r') as f:
	# добавим каждую непустую строку как элемент списка lst
	lst = [line.strip() for line in f if line.strip()]

print(lst)

print("\n--------------------------------------------------------------\n")


"""Файлы с табличными данными
Файл с табличными данными — это файл, в котором данные структурированы 
по строкам. Каждая строка обычно содержит информацию о ком-то или о чем-то, как показано ниже: 
Jeff Russell, jeff.russell, sales
Jane Boorman, jane.boorman, sales

Это пример плоского файла, наиболее распространенного типа файла табличных данных. 
Такое название обусловлено структурой: плоские файлы содержат 
записи с простой (плоской) структурой, в них нет вложенных структур или 
подзаписей. Как правило, плоский файл — это текстовый файл в формате 
CSV или TSV (tab-separated values), содержащий по одной записи в строке. 

В файлах CSV значения в записи разделяются запятыми, а в файлах TSV 
в качестве разделителя используется табуляция. Оба формата имеют широкую поддержку; 
они часто используются для перемещения табличных данных между приложениями.

Ниже приведен пример данных в формате CSV, где первая строка содержит 
заголовки, которые описывают содержание строк, расположенных под ними. 
Описания заголовков используются в качестве ключей для получения данных, 
которые следуют за этими заголовками."""

"""Функция open() возвращает объект file, который мы передаем считывателю 
из модуля csv. В данном случае используется DictReader(), преобразующий 
данные в каждой строке в словарь, с использованием в качестве ключей соответствующие заголовки из первой строки. 
Далее мы добавляем эти словари в список."""

path_1 = 'cars.csv'

with open(path_1, 'r') as csv_file:
	csv_reader = csv.DictReader(csv_file)
	cars = []
	for row in csv_reader:
		cars.append(dict(row))
pprint(cars)

print("\n--------------------------------------------------------------\n")

"""В качестве альтернативы можно использовать метод reader() из модуля csv. 
Тогда файл CSV преобразуется в список списков, где каждый внутренний список 
будет представлять строку и первой будет строка заголовка:"""

with open(path_1, "r") as csv_file:
	csv_reader = csv.reader(csv_file)
	cars = []
	for row in csv_reader:
		cars.append(row)
pprint(cars)

print("\n--------------------------------------------------------------\n")


"""Двоичные файлы
Существуют также исполняемые (.exe) и графические (.jpeg, .bmp и др.) файлы, 
которые содержат данные в двоичном формате в виде последовательности байтов. 
Поскольку эти байты обычно интерпретируются не как 
текстовые символы, вы не можете получить доступ к содержимому двоичного 
файла, открыв его в текстовом режиме. Вместо этого необходимо использовать 
функцию open() в двоичном режиме.

Мы сообщаем функции open(), что нужно открыть файл для чтения в двоичном 
режиме, передавая "rb" в качестве второго параметра. 
Извлеченный объект, как и объект, полученный при открытии файла в текстовом режиме, содержит 
метод read(), который позволяет получить содержимое файла. В данном примере содержимое извлекается в виде объекта bytes. 
И мы просто определяем количество байтов, прочитанных из файла"""

image = "собака.jpg"

with open(image, "rb") as image_file:
	content = image_file.read()

print(len(content))


